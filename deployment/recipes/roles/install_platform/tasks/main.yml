---
#  vars:
#    volttron_source_changed: no

##NOTE there is no way to tell if the bootstrap steps are producing
##     changes or not, this is not idiomatic ansible. It would be
##     better if there were a changed condition.
##     >> could achieve this with a custom module that checks pip freeze
##        from before and after each call, maybe something simpler
- name: create volttron platform venv {{ volttron_venv }}
  pip:
    virtualenv: "{{ volttron_venv }}"
    virtualenv_command: "/usr/bin/python3 -m venv"
    ## We add setuptools here because the module needs at
    ## a non-empty target list to avoid warnings and report
    ## change status correctly
    name:
    - setuptools
- name: link the platform venv
  when: volttron_venv != (volttron_root + "/env")
  file:
    src: "{{ volttron_venv }}"
    dest: "{{ volttron_root }}/env"
    state: link

- name: bootstrap the VOLTTRON environment
  volttron_bootstrap:
    volttron_root: "{{volttron_root}}"
    features:
    - "{{ (host_configuration['config']['bind-web-address'] is defined) | ternary('web', None) }}"
    - "{{ (message_bus == 'rmq') | ternary('rabbitmq', None) }}"
    - "{{ volttron_features }}"
  register: v_b_result
- debug:
    msg: "{{ v_b_result.command }}"
  when: verbose_debug_tasks

- name: Install extra requirements for this instance
  pip:
    virtualenv: "{{ volttron_venv }}"
    name: "{{ extra_requirements }}"
  environment:
    HTTP_PROXY: "{{ http_proxy }}"
  when: (extra_requirements | length) > 0

- name: create environment activation script
  template:
    src: activate-instance-env.j2
    dest: "{{ ansible_env.HOME }}/activate-{{ instance_name }}-env"

# configure the platform
- name: ensure VOLTTRON_HOME exists
  file:
    path: "{{ volttron_home }}"
    state: directory
    mode: 0755
##TODO: this isn't good logic, if we set then change the instance
#       name (because it is also define din host_configurationl.config)
#       then we're not idempotent (it gets reset every time)
- name: set instance name
  ini_file:
    path: "{{ volttron_home }}/config"
    section: volttron
    option: instance-name
    value: "{{ instance_name }}"
    mode: '0600'
    backup: yes
- name: set message bus
  ini_file:
    path: "{{ volttron_home }}/config"
    section: volttron
    option: message-bus
    value: "{{ message_bus }}"
    mode: '0600'
    backup: yes
- name: ensure platform configuration
  loop: "{{ host_configuration.config | dict2items }}"
  ini_file:
    path: "{{ volttron_home }}/config"
    section: volttron
    option: "{{ item.key }}"
    value: "{{ item.value }}"
    mode: '0600'
    backup: yes

# For RMQ, do the extra config/bootstrapping/cert generation
- name: rabbitmq configuration
  when: message_bus == "rmq"
  block:
  - name: create rabbitmq config
    template:
      src: rabbitmq_config.yml.j2
      dest: "{{ volttron_home }}/rabbitmq_config.yml"

  - name: run vcfg to configure for RMQ
    ##NOTE: note that this task will always report changes and will replace and recreate the rmq confg (even if no changes)
    ##      this is not great design generally, and violates idempotent expectations in ansible. For now we roll with it.
    expect:
      command: "{{ volttron_venv }}/bin/vcfg --vhome {{ volttron_home }} --instance-name {{ instance_name }} --rabbitmq single {{ volttron_home }}/rabbitmq_config.yml"
      responses:
        '.*Remove [a-zA-Z1-9_\-./]*/rabbitmq.conf?.*': 'y'
        '.*Do you want to use this certificate.*': ''
      timeout: 90
    register: vcfg_result
    ignore_errors: "{{verbose_debug_tasks | bool}}"
  - name: debug print of vcfg results
    when: verbose_debug_tasks | bool
    debug:
      msg: "{{ vcfg_result }}"
    failed_when: vcfg_result.failed

##TODO: if a platform is already running, this will have changed the config but not have restarted it.
##      the install & config above belongs in a role, this playbook should inteligently determine if it needs to restart the platform
